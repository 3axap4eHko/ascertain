import{_ as s,c as n,a as e,o as p}from"./app-CH6iDSF9.js";const t={};function c(i,a){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="ascertain" tabindex="-1"><a class="header-anchor" href="#ascertain"><span>Ascertain</span></a></h1><h3 id="ascertain-what-data-is-not-suitable-for-your-library" tabindex="-1"><a class="header-anchor" href="#ascertain-what-data-is-not-suitable-for-your-library"><span>Ascertain what data is not suitable for your library</span></a></h3><p>0-Deps, simple, blazing fast, for browser and Node.js object schema validator</p><p><a href="https://codecov.io/gh/3axap4eHko/ascertain" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/codecov/c/github/3axap4eHko/ascertain/master.svg?maxAge=43200" alt="Coverage Status"></a><a href="https://github.com/3axap4eHko/ascertain/actions/workflows/cicd.yml" target="_blank" rel="noopener noreferrer"><img src="https://github.com/3axap4eHko/ascertain/actions/workflows/cicd.yml/badge.svg" alt="Build Status"></a><a href="https://www.npmjs.com/package/ascertain" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/ascertain.svg?maxAge=43200" alt="NPM version"></a><a href="https://www.npmjs.com/package/ascertain" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/dw/ascertain.svg?maxAge=43200" alt="Downloads"></a><a href="https://snyk.io/test/npm/ascertain/latest" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/snyk/vulnerabilities/github/3axap4eHko/ascertain.svg?maxAge=43200" alt="Snyk"></a></p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2><ul><li>Type-safe validation: Ensures your data conforms to predefined schemas.</li><li>Composite schemas: Supports logical AND, OR, and optional schemas.</li><li>Type casting: Automatically parses and casts strings to other types.</li><li>Error handling: Provides detailed error messages for invalid data.</li></ul><h2 id="schema-description" tabindex="-1"><a class="header-anchor" href="#schema-description"><span>Schema description</span></a></h2><ul><li>Primitive Values: Any primitive value (e.g., string, number, bigint, boolean, undefined, symbol, null) is used as an expected constant to match against.</li><li>Function Types: Functions are used as constructors for non-objects and instance types for object types.</li><li>Array Values: Arrays are used to represent an expected array type, where every item in the array must match the specified type (acting as an &quot;and&quot; operator).</li><li>Regular Expressions: Regular expressions are used to validate that a value matches a specified string pattern.</li><li>Object Types: Non-null objects are used as templates for expected properties, where each property of the object must match the corresponding schema definition.</li></ul><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><ul><li><a href="#keys"><code>$keys</code></a></li><li><a href="#values"><code>$values</code></a></li><li><a href="#strict"><code>$strict</code></a></li><li><a href="#orschemas-schema"><code>or(...schemas: Schema[])</code></a></li><li><a href="#andschemas-schema"><code>and(...schemas: Schema[])</code></a></li><li><a href="#optionalschema-schema"><code>optional(schema: Schema)</code></a></li><li><a href="#tupleschemas-schema"><code>tuple(...schemas: Schema[])</code></a></li><li><a href="#compileschema-schema-rootname-string"><code>compile(schema: Schema, rootName: string)</code></a></li><li><a href="#ascertainschema-schema-data-t-rootname--root"><code>ascertain(schema: Schema, data: T, rootName = &quot;[root]&quot;)</code></a></li></ul><h3 id="keys" tabindex="-1"><a class="header-anchor" href="#keys"><span><code>$keys</code></span></a></h3><p>Symbol for validating object keys against a schema.</p><h3 id="values" tabindex="-1"><a class="header-anchor" href="#values"><span><code>$values</code></span></a></h3><p>Symbol for validating object values against a schema.</p><h3 id="strict" tabindex="-1"><a class="header-anchor" href="#strict"><span><code>$strict</code></span></a></h3><p>Symbol for enforcing strict object validation (no extra properties allowed).</p><h3 id="orschemas-schema" tabindex="-1"><a class="header-anchor" href="#orschemas-schema"><span><code>or(...schemas: Schema[])</code></span></a></h3><p>Operator for validating data against any of the provided schemas (logical OR).</p><p>Creates a schema that accepts data matching any one of the provided schemas. This is useful for creating union types or alternative validation paths.</p><ul><li>@template T - The type of data the operator validates.</li><li>@param schemas - Multiple schemas where at least one must match the data.</li><li>@returns A schema that validates data against any of the provided schemas.</li></ul><h3 id="andschemas-schema" tabindex="-1"><a class="header-anchor" href="#andschemas-schema"><span><code>and(...schemas: Schema[])</code></span></a></h3><p>Operator for validating data against all provided schemas (logical AND).</p><p>Creates a schema that requires data to match every one of the provided schemas. This is useful for combining multiple validation requirements or adding constraints.</p><ul><li>@template T - The type of data the operator validates.</li><li>@param schemas - Multiple schemas that all must match the data.</li><li>@returns A schema that validates data against all of the provided schemas.</li></ul><h3 id="optionalschema-schema" tabindex="-1"><a class="header-anchor" href="#optionalschema-schema"><span><code>optional(schema: Schema)</code></span></a></h3><p>Operator for making a schema optional (nullable).</p><p>Creates a schema that accepts the provided schema or null/undefined values. This is useful for optional object properties or nullable fields.</p><ul><li>@template T - The type of data the operator validates.</li><li>@param schema - The schema to make optional.</li><li>@returns A schema that validates data against the provided schema or accepts null/undefined.</li></ul><h3 id="tupleschemas-schema" tabindex="-1"><a class="header-anchor" href="#tupleschemas-schema"><span><code>tuple(...schemas: Schema[])</code></span></a></h3><p>Operator for validating data against a fixed-length tuple of schemas.</p><p>Creates a schema that validates arrays with a specific length and type for each position. This is useful for coordinate pairs, RGB values, or any fixed-structure data.</p><ul><li>@template T - The type of data the operator validates (a tuple of types).</li><li>@param schemas - Schemas for each position in the tuple, in order.</li><li>@returns A schema that validates data as a tuple with the specified structure.</li></ul><h3 id="compileschema-schema-rootname-string" tabindex="-1"><a class="header-anchor" href="#compileschema-schema-rootname-string"><span><code>compile(schema: Schema, rootName: string)</code></span></a></h3><p>Compiles a schema into a validation function.</p><p>This function takes a schema definition and generates a JavaScript function that can be used to validate data against the schema.</p><ul><li>@template T - The type of data the schema validates.</li><li>@param schema - The schema to compile.</li><li>@param rootName - A name for the root of the data structure (used in error messages).</li><li>@returns A validation function that takes data as input and throws a TypeError if the data does not conform to the schema.</li></ul><h3 id="ascertainschema-schema-data-t-rootname--root" tabindex="-1"><a class="header-anchor" href="#ascertainschema-schema-data-t-rootname--root"><span><code>ascertain(schema: Schema, data: T, rootName = &quot;[root]&quot;)</code></span></a></h3><p>Asserts that data conforms to a given schema.</p><p>This function is a convenient wrapper around <code>compile</code>. It compiles the schema and immediately validates the provided data against it.</p><ul><li>@template T - The type of data the schema validates.</li><li>@param schema - The schema to validate against.</li><li>@param data - The data to validate.</li><li>@param rootName - A name for the root of the data structure (used in error messages, defaults to &#39;[root]&#39;).</li><li>@throws <code>{TypeError}</code> If the data does not conform to the schema.</li></ul><h2 id="usage-example" tabindex="-1"><a class="header-anchor" href="#usage-example"><span>Usage Example</span></a></h2><h3 id="schema-compilation" tabindex="-1"><a class="header-anchor" href="#schema-compilation"><span>Schema compilation</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> optional<span class="token punctuation">,</span> and<span class="token punctuation">,</span> or<span class="token punctuation">,</span> $keys<span class="token punctuation">,</span> $values<span class="token punctuation">,</span> Schema<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ascertain&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">number</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token builtin">string</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  <span class="token builtin">boolean</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">function</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span></span>
<span class="line">  array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token punctuation">,</span></span>
<span class="line">  object<span class="token operator">:</span> Object<span class="token punctuation">,</span></span>
<span class="line">  date<span class="token operator">:</span> <span class="token function">and</span><span class="token punctuation">(</span>Date<span class="token punctuation">,</span> <span class="token punctuation">{</span> toJSON<span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  regexp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regexp</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="line">  oneOfValue<span class="token operator">:</span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  arrayOfNumbers<span class="token operator">:</span> <span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  objectSchema<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">number</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  optional<span class="token operator">:</span> <span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">number</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  keyValue<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span>$keys<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^key[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>$values<span class="token punctuation">]</span><span class="token operator">:</span> Number</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  parsedNumber<span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  parsedString<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  parsedBoolean<span class="token operator">:</span> Boolean<span class="token punctuation">,</span></span>
<span class="line">  parsedArray<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  parsedJSON<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">number</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  parsedBase64<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  parsedTime<span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// two minutes</span></span>
<span class="line">  parsedDate<span class="token operator">:</span> Date<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="runtime-validation" tabindex="-1"><a class="header-anchor" href="#runtime-validation"><span>Runtime validation</span></a></h3><p>Create data ascertain</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ascertain<span class="token punctuation">,</span> optional<span class="token punctuation">,</span> and<span class="token punctuation">,</span> or<span class="token punctuation">,</span> $keys<span class="token punctuation">,</span> $values<span class="token punctuation">,</span> Schema<span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ascertain&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// create data sample</span></span>
<span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">number</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token builtin">string</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token builtin">boolean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">function</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  array<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  object<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  date<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">,</span></span>
<span class="line">  regexp<span class="token operator">:</span> <span class="token string">&#39;regexp&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  oneOfValue<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  arrayOfNumbers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  objectSchema<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">number</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  optional<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  keyValue<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    keyOne<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    keyTwo<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    keyThree<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// fault tolernat type casting</span></span>
<span class="line">  parsedNumber<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  parsedString<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  parsedBoolean<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  parsedArray<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">&#39;1,2,3,4,5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  parsedJSON<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">&#39;{ &quot;number&quot;: 1 }&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  parsedBase64<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">base64</span><span class="token punctuation">(</span><span class="token string">&#39;dGVzdA==&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  parsedTime<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;2m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  parsedDate<span class="token operator">:</span> <span class="token keyword">as</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">&#39;31-12-2024&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// create data schema</span></span>
<span class="line"><span class="token keyword">const</span> schema<span class="token operator">:</span> Schema<span class="token operator">&lt;</span><span class="token keyword">typeof</span> data<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">number</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token builtin">string</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  <span class="token builtin">boolean</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">function</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span></span>
<span class="line">  array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token punctuation">,</span></span>
<span class="line">  object<span class="token operator">:</span> Object<span class="token punctuation">,</span></span>
<span class="line">  date<span class="token operator">:</span> <span class="token function">and</span><span class="token punctuation">(</span>Date<span class="token punctuation">,</span> <span class="token punctuation">{</span> toJSON<span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  regexp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regexp</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="line">  oneOfValue<span class="token operator">:</span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  arrayOfNumbers<span class="token operator">:</span> <span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  objectSchema<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">number</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  optional<span class="token operator">:</span> <span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">number</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  keyValue<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span>$keys<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^key[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>$values<span class="token punctuation">]</span><span class="token operator">:</span> Number</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  parsedNumber<span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  parsedString<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  parsedBoolean<span class="token operator">:</span> Boolean<span class="token punctuation">,</span></span>
<span class="line">  parsedArray<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  parsedJSON<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">number</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  parsedBase64<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  parsedTime<span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// two minutes</span></span>
<span class="line">  parsedDate<span class="token operator">:</span> Date<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// validate</span></span>
<span class="line"><span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ascertain</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> data<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">&#39;[DATA]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="benchmark-vs-zod-and-ajv" tabindex="-1"><a class="header-anchor" href="#benchmark-vs-zod-and-ajv"><span>Benchmark VS zod and ajv</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">⭐ Script ajv-vs-zod-vs-ascertain.js</span>
<span class="line">  ⇶ Suite ajv vs zod vs ascertain</span>
<span class="line">    ➤ Perform benchmark</span>
<span class="line">      ✓ Measure 500000 zod static schema validation</span>
<span class="line">        ┌──────────┬──────────┬──────────┬──────────┬────────────┬────────┐</span>
<span class="line">        │ (index)  │ med      │ p95      │ p99      │ total      │ count  │</span>
<span class="line">        ├──────────┼──────────┼──────────┼──────────┼────────────┼────────┤</span>
<span class="line">        │ 0.000699 │ 0.000788 │ 0.000996 │ 0.001624 │ 462.602373 │ 500000 │</span>
<span class="line">        └──────────┴──────────┴──────────┴──────────┴────────────┴────────┘</span>
<span class="line">      ✓ Measure 500000 zod dynamic schema validation</span>
<span class="line">        ┌──────────┬──────────┬──────────┬──────────┬─────────────┬────────┐</span>
<span class="line">        │ (index)  │ med      │ p95      │ p99      │ total       │ count  │</span>
<span class="line">        ├──────────┼──────────┼──────────┼──────────┼─────────────┼────────┤</span>
<span class="line">        │ 0.006248 │ 0.006918 │ 0.007524 │ 0.016948 │ 3780.465563 │ 500000 │</span>
<span class="line">        └──────────┴──────────┴──────────┴──────────┴─────────────┴────────┘</span>
<span class="line">      ✓ Measure 500000 ascertain static schema validation</span>
<span class="line">        ┌──────────┬──────────┬──────────┬──────────┬───────────┬────────┐</span>
<span class="line">        │ (index)  │ med      │ p95      │ p99      │ total     │ count  │</span>
<span class="line">        ├──────────┼──────────┼──────────┼──────────┼───────────┼────────┤</span>
<span class="line">        │ 0.000063 │ 0.000071 │ 0.000098 │ 0.000267 │ 41.673271 │ 500000 │</span>
<span class="line">        └──────────┴──────────┴──────────┴──────────┴───────────┴────────┘</span>
<span class="line">      ✓ Measure 500000 ascertain dynamic schema validation</span>
<span class="line">        ┌──────────┬──────────┬──────────┬──────────┬────────────┬────────┐</span>
<span class="line">        │ (index)  │ med      │ p95      │ p99      │ total      │ count  │</span>
<span class="line">        ├──────────┼──────────┼──────────┼──────────┼────────────┼────────┤</span>
<span class="line">        │ 0.000367 │ 0.000415 │ 0.000525 │ 0.001055 │ 239.078129 │ 500000 │</span>
<span class="line">        └──────────┴──────────┴──────────┴──────────┴────────────┴────────┘</span>
<span class="line">      ✓ Measure 500000 ajv compiled schema validation</span>
<span class="line">        ┌──────────┬──────────┬──────────┬──────────┬───────────┬────────┐</span>
<span class="line">        │ (index)  │ med      │ p95      │ p99      │ total     │ count  │</span>
<span class="line">        ├──────────┼──────────┼──────────┼──────────┼───────────┼────────┤</span>
<span class="line">        │ 0.000063 │ 0.000072 │ 0.000124 │ 0.000307 │ 44.542936 │ 500000 │</span>
<span class="line">        └──────────┴──────────┴──────────┴──────────┴───────────┴────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license"><span>License</span></a></h2><p>License <a href="http://opensource.org/licenses/MIT" target="_blank" rel="noopener noreferrer">The MIT License</a> Copyright (c) 2019-2025 Ivan Zakharchanka</p>`,50)]))}const l=s(t,[["render",c]]),r=JSON.parse('{"path":"/","title":"Ascertain","lang":"en-US","frontmatter":{},"git":{"updatedTime":1752440061000,"contributors":[{"name":"Ivan Zakharchanka","username":"","email":"3axap4eHko@gmail.com","commits":19},{"name":"3axap4eHko","username":"3axap4eHko","email":"3axap4eHko@gmail.com","commits":3,"url":"https://github.com/3axap4eHko"}],"changelog":[{"hash":"6717b6561439a4ec2deccc31d8fd426fe461cb00","time":1752440061000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"fixes error interpolation"},{"hash":"569b2d6377bee089365f5db85bc8e75907c43a4c","time":1752438767000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"new docs generator"},{"hash":"fcf0dbd1a787c70cfc2b3457f1a41734a38e89a5","time":1752288513000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"v2"},{"hash":"75c688806879f6369639c949d52ef10ba7fc7ee1","time":1719766460000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds compiled schema validation"},{"hash":"4e3c666dcdcd6b60bebea6d9779004cec5c57c6e","time":1719096688000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"switch to typescript"},{"hash":"5e5101bf68f882455ffffb7add3c03b019b9eb30","time":1707583604000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"upgrade"},{"hash":"41ab6ec86906f4611dfd1b5abd881cd116a113d9","time":1677877582000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"added as.string"},{"hash":"19a9e3c26e6863551bc8d330281bfb70483f82c0","time":1665595008000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds base64 converter"},{"hash":"f0c2bef6564e2e79b35ee81fc0b8869d6d9e8a2e","time":1661556790000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"fault tolerant type casting"},{"hash":"d0dbe0f2309766f341f9c0aa425540bd7d94131f","time":1620059625000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"enhanced typescript support"},{"hash":"08798a9f9f0ea1fb6068861ccc67a0e85d79dd65","time":1616167965000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"github actions"},{"hash":"aac244bc37f0aa935ce1d523c3ce6cbd78303a68","time":1561492559000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"readme update"},{"hash":"f6576bf26e78e2775b41cc4c32f7a70d3d42d68b","time":1560459743000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"and/or schema condition"},{"hash":"7b991a081c8a48e1dee64c2c3737afeefd843a98","time":1560451903000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"keys and values ascertain"},{"hash":"bf8758457e99c3ed875872ece20b025cf7fe4fbd","time":1560373540000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"badge update"},{"hash":"985e4d9d739c8c49e4a6fb4381eb69f21bee48ff","time":1560373161000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"README update"},{"hash":"07c232b5475e19866a3d7bd29a0bba079b103db0","time":1560029070000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"snyk badge"},{"hash":"5190737a48c427881bab87addf3481863aac7e00","time":1559143438000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"readme updates"},{"hash":"56f1d92aa35143a619b32a5e2e4f10a7478ec542","time":1559141010000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"readme update"},{"hash":"98de1fed13e3cbee08e812f7c1a7dbd2e98a33ce","time":1559140558000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"test updates"},{"hash":"92f431255f6f4ce8eca9cc37ec6a710aeba789f3","time":1559139294000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"update travis shield"},{"hash":"5bf3d5e870ae9bda098e01d5aca75d993e020348","time":1559138961000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":":bowtie:"}]},"filePathRelative":"index.md"}');export{l as comp,r as data};
